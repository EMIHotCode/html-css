Написать функцию loadImgChain(src, okSrc, errorSrc), которая должна 
создать в body элемент IMG c атрибутом src из своего первого параметра.
В случае, если первая картинка успешно загрузилась (произошло событие onload) - создать еще один IMG (индикатор загрузки первой картинки)
	c src равным okSrc, и  сообщить, в содержимом элемента span, результат загрузки картинки-индикатора.
А в случае, если первая картинка не загрузилась (произошло событие onerror) - создать IMG-индикатор, c src равным уже errorSrc,
	и сообщить, в содержимом элемента span, результат загрузки картинки-индикатора.

Функция loadImgChain() - это функция верхнего уровня, она не должна сама создавать в DOM картинки(элементы <img>),
и вешать обработчики onload и onerror,
для этого рекомендуется использовать вспомогательную универсальную функцию.

Функцию loadImgChain() реализовать с использованием Promise (для цепочки вспомогательных функций),
возможно так же дополнительно предложить реализации с применением await.

код тестового вызова функции:

const 
  cat = 'https://www.svgimages.com/svg-image/s10/cute-cat-clip-art-256x256.png',
  ok = 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/google/274/thumbs-up_1f44d.png',
  bad = 'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/120/google/274/thumbs-down_1f44e.png';

// в ручном режиме с чистым body (document.body.innerHTML=''), запускаем по одной строке и смотрим результат  
loadImgChain(cat,ok,bad);  // [😺] [👍] indicator ok
loadImgChain(cat,'-',bad); // [😺] [ ] indicator error
loadImgChain('-',ok,bad);  // [ ] [👎] indicator ok
loadImgChain('-',ok,'-');  // [ ] [ ] indicator error

либо используем такой код для тестирования:
function test(m) {  
  document.body.innerHTML = '';
console.log('test ',m);
  switch (m) {
    case 0: loadImgChain(cat, ok, bad); return;  // [😺] [👍] indicator ok
    case 1: loadImgChain(cat, '-', bad); return; // [😺] [x] indicator error
    case 2: loadImgChain('-', ok, bad); return;  // [x] [👎] indicator ok
    case 3: loadImgChain('-', ok, '-'); return;  // [x] [x] indicator error
  }
}
function testTask(i) {
  test(i);
  if (++i < 4)
    document.addEventListener('click', _ => testTask(i), { once: true })
}
testTask(0);
